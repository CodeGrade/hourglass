<% page = "#{params[:controller]}/#{params[:action]}" %>
<% if page == "exams/show" %>
$(function() {

    // browser detection
    // TODO: more robust browser detection, with version numbers:
    //   https://github.com/lancedikson/bowser
    const isChrome = navigator.userAgent.search("Chrome") >= 0;
    const isFirefox = navigator.userAgent.search("Firefox") >= 0;
    if (!isChrome && !isFirefox) {
        $("#interstitial").html('Please use Chrome, Chromium, or Firefox to continue.');
        return;
    }

    const beginButton = $("#begin-exam");
    const professor = <%= current_user.admin_or_prof? %>;
    if (professor) {
        beginButton.on('click', bootSequenceConfirmed);
    } else {
        beginButton.on('click', checkFullscreen);
    }

    function isFullscreen() {
        const maximized = window.outerHeight == screen.height;
        const fullheight = window.innerHeight == window.outerHeight;
        const fullWidth = window.innerWidth == window.outerWidth;
        const covered = window.screenLeft == 0 && window.screenTop == 0;
        return maximized && fullheight && fullWidth && covered;
    }

    function openFullscreen() {
        const elem = document.documentElement;
        if (elem.requestFullscreen) {
            return elem.requestFullscreen();
        } else if (elem.mozRequestFullScreen) { // Firefox
            return elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) { // Chrome, Safari and Opera
            return elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) { // IE/Edge
            return elem.msRequestFullscreen();
        }
    }

    var interval;
    function startSnapshots() {
        interval = setInterval(sendExamSnapshot, 5000);
    }

    function stopSnapshots() {
        clearInterval(interval);
    }

    // ready to begin exam
    function bootSequenceConfirmed() {
        console.log('locked.');
        $("#interstitial").html('');
        loadExamContent().then(function() {
            startSnapshots();
        });
    }

    const regularNav = $("#site-nav");

    function loadExamContent() {
        return $.get("<%= contents_exam_path @exam %>").then(function(contents) {
            $("#exam-contents").html(contents);
            const examNav = $("#exam-nav").remove();
            $("#site-nav").replaceWith(examNav);
        });
    }

    function unloadExamContent() {
        $("#exam-contents").html('');
        $("#exam-nav").replaceWith(regularNav);
    }

    function checkFullscreen() {
        if (!isFullscreen()) {
            console.log('not fullscreen.')
            openFullscreen().then(function() {
                console.log('fullscreen activated');
                setTimeout(postFullscreen, 500); // fullscreen needs time to finish
            }).catch(function (reason) {
                console.log('could not achieve fullscreen', reason);
                // TODO fullscreen didn't work! what now?
            });
        }
    }

    // full screen has been enabled. continue locking down
    function postFullscreen() {
        if (!isFullscreen()) {
            console.log("still not fullscreen. console open?");
            document.exitFullscreen().then(function(){
                alert('Please close developer console before continuing.');
            });
            return;
        }
        console.log('locking down...');
        installListeners();
        bootSequenceConfirmed();
    }

    function lockOut() {
        stopSnapshots();
        removeListeners();
        unloadExamContent();
      $("nav").removeClass("bg-light").addClass("bg-warning");
      $("#exam-contents").html("You have been locked out of this exam. Please notify an instructor if this is unexpected.");
    }

    function anomalyDetected(reason, event) {
        console.log('ANOMALY DETECTED:', reason, event);
        lockOut();
        const anomalyPath = "<%= anomaly_detected_exam_path(@exam) %>";
        const token = $('meta[name=csrf-token]').attr('content');
        $.ajax({
            url: anomalyPath,
            type: 'POST',
            headers: {
                'X-CSRF-Token': token
            },
            data: {
              reason: reason
            }
        });
    }

    const listeners = {
        mouseout: function (e) {
            if (e.toElement === null && e.relatedTarget === null) {
                anomalyDetected('mouseout', e);
            }
        },
        resize: function (e) {
            if (!isFullscreen()) {
                anomalyDetected('left fullscreen', e);
            }
        },
        blur: function(e) {
            anomalyDetected('window blurred', e);
        },
        contextmenu: function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('user tried to open context menu');
        },
    }

    function installListeners() {
        for (var event in listeners) {
            const handler = listeners[event];
            $(window).on(event, handler);
        }
    }

    function removeListeners() {
        for (var event in listeners) {
            const handler = listeners[event];
            $(window).off(event, handler);
        }
    }

    function sendExamSnapshot() {
        $(".CodeMirror").each(function(index, cm) {
            cm.CodeMirror.save();
        });
        const formData = $("#exam-form").serialize();
        const snapshotPath = "<%= save_snapshot_exam_path(@exam) %>";
        const token = $('meta[name=csrf-token]').attr('content');
        $.ajax({
            url: snapshotPath,
            type: 'POST',
            headers: {
                'X-CSRF-Token': token
            },
            data: formData,
            success: function(data, status, xhr) {
                if (data.lockout) {
                    lockOut();
                }
            }
        });
    }
});
<% end %>
